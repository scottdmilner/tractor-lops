from __future__ import annotations

import hou
import os

import tractor.api.author as author

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Iterable

_shared_module = hou.nodeType(
    hou.lopNodeTypeCategory(), "tlops::shared_python"
).hdaModule()
ParmData = _shared_module.ParmData


class SubmitParms(ParmData):
    title: str
    priority: int
    service: str
    engine_url: str
    engine_port: int


def ensure_valid_inputs(inputs: Iterable[hou.LopNode]) -> bool:
    for input in inputs:
        # if input is not a tractor_configure node, cancel
        if not input.type().name().startswith("tlops::tractor_configure"):
            hou.ui.displayMessage(
                "Please ensure that all inputs to the Tractor Submit node are Tractor Configure nodes. "
                f'Error on input node "{input.name()}"',
                title="Error sending to Tractor",
                severity=hou.severityType.Error,
            )
            return False
    return True


def configure_tractor_connection(node: SubmitParms) -> None:
    author.setEngineClientParam(hostname=node.engine_url, port=node.engine_port)


def generate_envkey() -> str:
    return " ".join(
        ["setenv"]
        + [
            f"{var}={os.getenv(var)}"
            for var in (
                "HOUDINI_PATH",
                "OCIO",
                "PATH",
                "PIXAR_LICENSE_FILE",
                "PXR_AR_DEFAULT_SEARCH_PATH",
                "PXR_PLUGINPATH_NAME",
                "RFHTREE",
                "RMAN_COLOR_CONFIG_DIR",
                "RMAN_PROCEDURALPATH",
                "RMANTREE",
            )
        ]
        + ["HOUDINI_LICENSE_SERVER=animlic.cs.byu.edu"]
    )


def sendToTractor(node: hou.LopNode) -> None:
    if not ensure_valid_inputs(node.inputs()):
        return

    parms = SubmitParms(node)
    configure_tractor_connection(parms)
    job = author.Job()
    job.title = parms.title
    job.envkey = [generate_envkey()]
    job.service = parms.service
    job.priority = parms.priority

    for input in node.inputs():
        task: author.Task = input.hdaModule().generate_tractor_task(input)
        job.addChild(task)

    # configure blades and such
    job.spool(block=True)

    author.closeEngineClient()
    hou.ui.displayConfirmation(
        f"Visit {parms.engine_url} to check progress.", title="Job sent to Tractor"
    )
