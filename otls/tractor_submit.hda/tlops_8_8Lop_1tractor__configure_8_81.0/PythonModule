from __future__ import annotations

# import argparse
import hou
import re

import tractor.api.author as author

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    pass


_shared_module = hou.nodeType(
    hou.lopNodeTypeCategory(), "tlops::shared_python"
).hdaModule()
ParmData = _shared_module.ParmData


class ConfigParms(ParmData):
    trange: str
    f1: float
    f2: float
    f3: float
    foffset1: float
    foffset2: float
    foffset3: float


def set_up_logs(output_list: list[str], regex: str) -> None:
    """Filter logs from stdout with the regex and save the message to output_list"""
    log_sink_filter_re = re.compile(regex)

    def log_sink_filter(log: hou.logging.LogEntry) -> bool:
        output_list.append(log_sink_filter_re.match(log.message()).group(1))
        return False

    sink = hou.logging.defaultSink(True)
    sink.connect("Standard Output")
    sink.setFilterCallback(log_sink_filter)


def get_frame_count(parms: ConfigParms, node: hou.LopNode) -> int:
    trange = parms.trange

    if trange == "off":
        return 1
    elif trange == "normal" or trange == "on":
        start = parms.f1
        end = parms.f2
        inc = parms.f3
    elif trange == "stage":
        stage = node.stage()
        start = stage.GetStartTimeCode() - parms.foffset1
        end = stage.GetEndTimeCode() + parms.foffset2
        inc = parms.foffset3

    if (start == 0.0) and (end == 0.0):
        return 0

    return (end + 1 - start) // inc


def generate_tractor_task(node: hou.LopNode) -> author.Task:
    command_list: list[str] = []
    set_up_logs(command_list, "(?:\/\w+)+ command: (husk .*)")

    task = author.Task(title=node.name())

    node.node("usdrender_rop").parm("execute").pressButton()

    # parser = argparse.ArgumentParser("husk")
    # parser.add_argument("-f", "--frame", default=1)
    # parser.add_argument("-n", "--frame-count", default=1)
    # parser.add_argument("-i", "--frame-inc", default=1)
    # parsed_args, others = parser.parse_known_intermixed_args(args)
    # hou.ui.displayMessage(str(args))

    parms = ConfigParms(node)

    if frame_count := get_frame_count(parms, node):
        while True:
            # wait for command_list to populate
            if len(command_list) >= frame_count:
                break

    frame_re = re.compile(".*-f (\d+).*")
    for cmd in command_list:
        fnum = frame_re.match(cmd).group(1)
        subtask = author.Task(title=f"Frame {fnum}")
        subtask.addCommand(
            author.Command(
                argv=[
                    "/bin/bash",
                    "-exc",
                    f'trap "hserver -S $HOUDINI_LICENSE_SERVER" SIGQUIT && {cmd}',
                ],
                retryrc=[
                    -11,  # Segmentation fault
                    -9,  # Unknown
                    3,  # Can't get license
                    135,  # Bus error
                    139,  # Segmentation fault
                ],
                maxrunsecs=3 * 60 * 60,
            )
        )
        task.addChild(subtask)

    return task
